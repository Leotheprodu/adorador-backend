// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
   previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id        Int          @id @default(autoincrement())
  name      String
  email     String       @unique
  phone     String?      @unique
  password  String
  birthdate DateTime?
  status    String       @default("inactive")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  tokens    Temporal_token_pool[]
  memberships Memberships[]
  roles     Roles[]
}
model Roles {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     Users[]
}
model Session {
  id        String   @id 
  sid       String   @unique
  data      String   @db.MediumText
  expiresAt   DateTime
}

model Temporal_token_pool {
  id             Int      @id @default(autoincrement())
  token          String   @unique
  userEmail      String
  user           Users    @relation(fields: [userEmail], references: [email])
  type           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Churches {
  id        Int          @id @default(autoincrement())
  name      String       @unique
  country   String
  address   String
  aniversary DateTime?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  memberships Memberships[]
  events  Events[]
  songs     Songs[]
}
model Memberships {
  id        Int        @id @default(autoincrement())
  user      Users      @relation(fields: [userId], references: [id])
  userId    Int
  church    Churches   @relation(fields: [churchId], references: [id])
  churchId  Int
  active    Boolean    @default(false) // Controla si el usuario es aceptado como miembro
  memberSince DateTime  @default(now())
  roles     ChurchMemberRoles[] // Relación con los roles dentro de la iglesia
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  @@unique([userId, churchId]) // Asegura que un usuario solo puede tener una membresía por iglesia
}

model ChurchMemberRoles {
  id          Int          @id @default(autoincrement())
  membership  Memberships   @relation(fields: [membershipId], references: [id])
  membershipId Int
  role        ChurchRoles         @relation(fields: [roleId], references: [id])  // Relación con la tabla de roles de las iglesias
  roleId      Int
  startDate   DateTime     @default(now())
  endDate     DateTime?
  active      Boolean      @default(true) // Controla si el rol está activo o no

  @@index([membershipId])
  @@index([roleId])
}
model ChurchRoles {
  id          Int          @id @default(autoincrement())
  name        String       @unique // Nombre del rol (pastor, líder de alabanza, etc.)
  description String?      // Descripción del rol si es necesario
  churchRoles ChurchMemberRoles[]
}
model Events {
  id        Int      @id @default(autoincrement())
  title     String
  date      DateTime
  churchId  Int
  church    Churches @relation(fields: [churchId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  songs     SongsEvents[]
}

model Songs {
  id        Int      @id @default(autoincrement())
  title     String   @unique
  artist    String?
  churchId  Int
  church    Churches @relation(fields: [churchId], references: [id])
  songType      String  @default("worship")
  youtubeLink String?
  key       String?
  tempo     String?
  lyrics    Songs_lyrics[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events  SongsEvents[]
}
model SongsEvents {
  eventId Int
  songId    Int
  event   Events @relation(fields: [eventId], references: [id], onDelete: Cascade)
  song      Songs    @relation(fields: [songId], references: [id], onDelete: Cascade)
  transpose Int      @default(0)
  order     Int      @default(0)


  @@id([eventId, songId])
}

model Songs_Structures {
  id        Int      @id @default(autoincrement())
  title     String   @unique
  lyrics    Songs_lyrics[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Songs_lyrics {
  id        Int      @id @default(autoincrement())
  songId    Int                                       
  song      Songs @relation(fields: [songId], references: [id])
  structureId Int
  structure Songs_Structures @relation(fields: [structureId], references: [id])
  lyrics    String
  chords    Songs_Chords[]
  position  Int     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Songs_Chords {
  id        Int      @id @default(autoincrement())
  lyricId   Int
  lyric     Songs_lyrics @relation(fields: [lyricId], references: [id])
  rootNote      String
  chordQuality String? @default("")
  slashChord String? @default("")
  slashQuality String? @default("")
  position  Int     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}